/*树的节点
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
/*******************************************************
********************************************************
//分两步解决这个问题，
第一步在树1中找到与树2相同的根节点，采用递归的方式
第二部根据找到的根节点分别判断更深层次的结构是否一致，采用递归的方式，注意递归停止的条件
********************************************************
********************************************************/
/*判断子树是否全部在原树内 */
bool IshaveTree2(TreeNode* pRoot1,TreeNode* pRoot2)
  {
    if(pRoot2 == NULL)
        return true;
    if(pRoot1 == NULL)
        return false;
    
    if(pRoot1->val != pRoot2->val)
        return false;
    
    return IshaveTree2(pRoot1->left,pRoot2->left) && IshaveTree2(pRoot1->right,pRoot2->right);            
  }
/*遍历树找到第一个相等的根节点*/
bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
{
  bool isSub = false;
  if(pRoot1 != NULL && pRoot2 != NULL)
    {
      if(pRoot1->val == pRoot2->val)
          isSub = IshaveTree2(pRoot1,pRoot2);
      if(!isSub)
          isSub = HasSubtree(pRoot1->left,pRoot2);
      if(!isSub)
          isSub = HasSubtree(pRoot1->right,pRoot2);
    }
    return isSub;
}
